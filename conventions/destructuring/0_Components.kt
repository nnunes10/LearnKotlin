package conventions.destructuring

import conventions.arithmeticoperators.Point

/**
 * Destructuring allows you to unpack a single composite value and store it in several separate variables
 *
 * The destructuring feature once again uses the principle of conventions.
 * For each variable in a destructuring declaration, a function named componentN is called
 *
 * val (x,y) = p
 * =>
 * val x = p.component1()
 * val y = p.component2()
 */

fun main(){
    val p = Point(20, 30)

    // The componentN functions are generated by the compiler since the class point was marked as data
    val (x,y) = p   // Declares variables x and y, initialized with components of p

    println(x)
    println(y)

    // destructuring declarations are helpful when we want to return multiple values from a function
    val (name, ext) = splitFilename("example.kt")
    println(name) // example
    println(ext)    // kt

}

data class NameComponents(val name: String, val extension: String)

fun splitFilename(fullName: String): NameComponents {
    val result = fullName.split('.', limit = 2)
    return NameComponents(result[0], result[1])
}